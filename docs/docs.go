// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    {
        "swagger": "2.0",
        "info": {
          "description": "This is a sample server for managing tasks.",
          "version": "1.0",
          "title": "Task API",
          "termsOfService": "http://swagger.io/terms/",
          "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
          }
        },
        "host": "localhost:8080",
        "basePath": "/",
        "schemes": [
          "http"
        ],
        "paths": {
          "/api/users": {
            "get": {
              "summary": "Get all users",
              "description": "Get all users with pagination",
              "tags": [
                "Users"
              ],
              "parameters": [
                {
                  "name": "offset",
                  "in": "query",
                  "description": "Offset",
                  "required": false,
                  "type": "integer",
                  "default": 0
                },
                {
                  "name": "limit",
                  "in": "query",
                  "description": "Limit",
                  "required": false,
                  "type": "integer",
                  "default": 100
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation"
                },
                "400": {
                  "description": "Bad request"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            },
            "post": {
              "summary": "Create a new user",
              "description": "Create a new user",
              "tags": [
                "Users"
              ],
              "responses": {
                "201": {
                  "description": "User created"
                },
                "400": {
                  "description": "Bad request"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/api/users/{id}": {
            "get": {
              "summary": "Get a user by ID",
              "description": "Get a user by ID",
              "tags": [
                "Users"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "type": "integer"
                }
              ],
              "responses": {
                "200": {
                  "description": "Successful operation"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "User not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            },
            "put": {
              "summary": "Update a user",
              "description": "Update a user",
              "tags": [
                "Users"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "type": "integer"
                }
              ],
              "responses": {
                "200": {
                  "description": "User updated"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "User not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            },
            "delete": {
              "summary": "Delete a user",
              "description": "Delete a user",
              "tags": [
                "Users"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "User ID",
                  "required": true,
                  "type": "integer"
                }
              ],
              "responses": {
                "204": {
                  "description": "No content"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "User not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/api/tasks": {
            "get": {
              "summary": "Get all tasks",
              "description": "Get all tasks",
              "tags": [
                "Tasks"
              ],
              "responses": {
                "200": {
                  "description": "Successful operation"
                },
                "400": {
                  "description": "Bad request"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            },
            "post": {
              "summary": "Create a new task",
              "description": "Create a new task",
              "tags": [
                "Tasks"
              ],
              "responses": {
                "201": {
                  "description": "Task created"
                },
                "400": {
                  "description": "Bad request"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/api/tasks/{id}/start": {
            "post": {
              "summary": "Start a task",
              "description": "Start a task",
              "tags": [
                "Tasks"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "Task ID",
                  "required": true,
                  "type": "integer"
                }
              ],
              "responses": {
                "200": {
                  "description": "Task started"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Task not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/api/tasks/{id}/stop": {
            "post": {
              "summary": "Stop a task",
              "description": "Stop a task",
              "tags": [
                "Tasks"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "Task ID",
                  "required": true,
                  "type": "integer"
                }
              ],
              "responses": {
                "200": {
                  "description": "Task stopped"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Task not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          },
          "/api/tasks/{id}": {
            "delete": {
              "summary": "Delete a task",
              "description": "Delete a task",
              "tags": [
                "Tasks"
              ],
              "parameters": [
                {
                  "name": "id",
                  "in": "path",
                  "description": "Task ID",
                  "required": true,
                  "type": "integer"
                }
              ],
              "responses": {
                "204": {
                  "description": "No content"
                },
                "400": {
                  "description": "Bad request"
                },
                "404": {
                  "description": "Task not found"
                },
                "500": {
                  "description": "Internal server error"
                }
              }
            }
          }
        },
        "externalDocs": {
          "description": "Find out more about Swagger",
          "url": "http://swagger.io"
        },
        "servers": [
          {
            "url": "https://petstore3.swagger.io/api/v3",
            "put": {
              "tags": [
                "pet"
              ],
              "summary": "Update an existing pet",
              "description": "Update an existing pet by Id",
              "operationId": "updatePet",
              "requestBody": {
                "description": "Update an existent pet in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                },
                "422": {
                  "description": "Validation exception"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Add a new pet to the store",
              "description": "Add a new pet to the store",
              "operationId": "addPet",
              "requestBody": {
                "description": "Create a new pet in the store",
                "content": {
                  "application/json": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  },
                  "application/x-www-form-urlencoded": {
                    "schema": {
                      "$ref": "#/components/schemas/Pet"
                    }
                  }
                },
                "required": true
              },
              "responses": {
                "200": {
                  "description": "Successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid input"
                },
                "422": {
                  "description": "Validation exception"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by status",
              "description": "Multiple status values can be provided with comma separated strings",
              "operationId": "findPetsByStatus",
              "parameters": [
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status values that need to be considered for filter",
                  "required": false,
                  "explode": true,
                  "schema": {
                    "type": "string",
                    "default": "available",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ]
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                },
                {
                  "name": "tags",
                  "in": "query",
                  "description": "Tags to filter by",
                  "required": false,
                  "explode": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/Pet"
                        }
                      }
                    }
                  }
                },
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                },
                "pet",
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to return",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    },
                    "application/xml": {
                      "schema": {
                        "$ref": "#/components/schemas/Pet"
                      }
                    }
                  }
                },
                {
                  "api_key": []
                },
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                },
                "pet",
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet that needs to be updated",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                {
                  "name": "name",
                  "in": "query",
                  "description": "Name of pet that needs to be updated",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status of pet that needs to be updated",
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "pet"
              ],
              "summary": "Deletes a pet",
              "description": "delete a pet",
              "operationId": "deletePet",
              "parameters": [
                {
                  "name": "api_key",
                  "in": "header",
                  "description": "",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                },
                {
                  "name": "petId",
                  "in": "path",
                  "description": "Pet id to delete",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid pet value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                },
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to update",
                  "required": true,
                  "schema": {
                    "type": "integer",
                    "format": "int64"
                  }
                },
                {
                  "name": "additionalMetadata",
                  "in": "query",
                  "description": "Additional Metadata",
                  "required": false,
                  "schema": {
                    "type": "string"
                  }
                }
              ],
              "requestBody": {
                "200": {
                  "description": "successful operation",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/ApiResponse"
                      }
                    },
                    "type": "integer",
                    "format": "int64"
                  }
                },
                "content": {
                  "application/octet-stream": {
                    "schema": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            },
            "ult": {
              "description": "successful operation"
            }
          }
        ],
        "components": {
          "schemas": {
            "Order": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "petId": {
                  "type": "integer",
                  "format": "int64",
                  "example": 198772
                },
                "quantity": {
                  "type": "integer",
                  "format": "int32",
                  "example": 7
                },
                "shipDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "status": {
                  "type": "string",
                  "description": "Order Status",
                  "example": "approved",
                  "enum": [
                    "placed",
                    "approved",
                    "delivered"
                  ]
                },
                "complete": {
                  "type": "boolean"
                }
              },
              "xml": {
                "name": "order"
              }
            },
            "Customer": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 100000
                },
                "username": {
                  "type": "string",
                  "example": "fehguy"
                },
                "address": {
                  "type": "array",
                  "xml": {
                    "name": "addresses",
                    "wrapped": true
                  },
                  "items": {
                    "$ref": "#/components/schemas/Address"
                  }
                }
              },
              "xml": {
                "name": "customer"
              }
            },
            "Address": {
              "type": "object",
              "properties": {
                "street": {
                  "type": "string",
                  "example": "437 Lytton"
                },
                "city": {
                  "type": "string",
                  "example": "Palo Alto"
                },
                "state": {
                  "type": "string",
                  "example": "CA"
                },
                "zip": {
                  "type": "string",
                  "example": "94301"
                }
              },
              "xml": {
                "name": "address"
              }
            },
            "Category": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "Dogs"
                }
              },
              "xml": {
                "name": "category"
              }
            },
            "User": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "username": {
                  "type": "string",
                  "example": "theUser"
                },
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "James"
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "12345"
                },
                "phone": {
                  "type": "string",
                  "example": "12345"
                },
                "userStatus": {
                  "type": "integer",
                  "description": "User Status",
                  "format": "int32",
                  "example": 1
                }
              },
              "xml": {
                "name": "user"
              }
            },
            "Tag": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64"
                },
                "name": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "tag"
              }
            },
            "Pet": {
              "required": [
                "name",
                "photoUrls"
              ],
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int64",
                  "example": 10
                },
                "name": {
                  "type": "string",
                  "example": "doggie"
                },
                "category": {
                  "$ref": "#/components/schemas/Category"
                },
                "photoUrls": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "type": "string",
                    "xml": {
                      "name": "photoUrl"
                    }
                  }
                },
                "tags": {
                  "type": "array",
                  "xml": {
                    "wrapped": true
                  },
                  "items": {
                    "$ref": "#/components/schemas/Tag"
                  }
                },
                "status": {
                  "type": "string",
                  "description": "pet status in the store",
                  "enum": [
                    "available",
                    "pending",
                    "sold"
                  ]
                }
              },
              "xml": {
                "name": "pet"
              }
            },
            "ApiResponse": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "format": "int32"
                },
                "type": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "xml": {
                "name": "##default"
              }
            }
          },
          "requestBodies": {
            "Pet": {
              "description": "Pet object that needs to be added to the store",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                },
                "application/xml": {
                  "schema": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            },
            "UserArray": {
              "description": "List of user object",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "securitySchemes": {
            "flows": {
              "implicit": {
                "authorizationUrl": "https://petstore3.swagger.io/oauth/authorize",
                "scopes": {
                  "write:pets": "modify pets in your account",
                  "read:pets": "read your pets"
                }
              }
            },
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
          }
        }
      }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "Task API",
	Description:      "This is a sample server for managing tasks.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,

}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
